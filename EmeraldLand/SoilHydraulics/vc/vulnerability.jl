#######################################################################################################################################################################################################
#
# Changes made to this function
# General
#     2021-Sep-30: create this function to work with two soil types using either VanGenuchten or BrooksCorey function
#     2022-Sep-07: add option to allow for soil water oversaturation
#     2022-Oct-20: set a minimum effective θ at eps(FT)
#
#######################################################################################################################################################################################################
"""

    soil_ψ_25(bc::BrooksCorey{FT}, θ::FT; oversaturation::Bool = false) where {FT}
    soil_ψ_25(vg::VanGenuchten{FT}, θ::FT; oversaturation::Bool = false) where {FT}

Return the soil metric potential, given
- `bc` or `vg` `BrooksCorey` or `VanGenuchten` type structure
- `θ` Soil volumetric water content (absolute value)
- `oversaturation` If true, allow for soil water oversaturation

"""
function soil_ψ_25 end

soil_ψ_25(bc::BrooksCorey{FT}, θ::FT; oversaturation::Bool = false) where {FT} = (
    (; B, Ψ_SAT, Θ_RES, Θ_SAT) = bc;

    # calculate effective θ
    θ_eff = max(eps(FT), (θ - Θ_RES) / (Θ_SAT - Θ_RES));

    # if θ_eff >= 1, use segmented function
    if θ_eff >= 1
        return oversaturation ? (θ - Θ_RES) - Ψ_SAT : -Ψ_SAT
    end;

    return -Ψ_SAT / (θ_eff ^ B)
);

soil_ψ_25(vg::VanGenuchten{FT}, θ::FT; oversaturation::Bool = false) where {FT} = (
    (; M, N, α, Θ_RES, Θ_SAT) = vg;

    # calculate effective θ
    θ_eff = max(eps(FT), (θ - Θ_RES) / (Θ_SAT - Θ_RES));

    # if θ_eff >= 1, use segmented function
    if θ_eff >= 1
        return oversaturation ? θ - Θ_RES : FT(0)
    end;

    return -1 * (θ_eff ^ (-1/M) - 1) ^ (1/N) / α
);


#######################################################################################################################################################################################################
#
# Changes to the function
# General
#     2022-Jun-01: migrate function to version v0.3 of PlantHydraulics v0.2
#
#######################################################################################################################################################################################################
"""

    soil_θ(bc::BrooksCorey{FT}, ψ_25::FT) where {FT}
    soil_θ(vg::VanGenuchten{FT}, ψ_25::FT) where {FT}

Return the soil water content, given
- `bc` or `vg` `BrooksCorey` or `VanGenuchten` type structure
- `ψ_25` Soil metric potential corrected to 25 Celcius

"""
function soil_θ end

soil_θ(bc::BrooksCorey{FT}, ψ_25::FT) where {FT} = (
    (; B, Ψ_SAT, Θ_RES, Θ_SAT) = bc;

    if ψ_25 >= 0
        return Θ_SAT
    end;

    return (-Ψ_SAT/ψ_25) ^ (1/B) * (Θ_SAT - Θ_RES) + Θ_RES
);

soil_θ(vg::VanGenuchten{FT}, ψ_25::FT) where {FT} = (
    (; M, N, α, Θ_RES, Θ_SAT) = vg;

    if ψ_25 >= 0
        return Θ_SAT
    end;

    return ( 1 / ( 1 + (-ψ_25 * α) ^ N ) ) ^ M * (Θ_SAT - Θ_RES) + Θ_RES
);


#######################################################################################################################################################################################################
#
# Changes to the function
# General
#     2022-Feb-01: migrate function to version v0.3 of PlantHydraulics
#     2022-Feb-01: add documentation
#     2022-Feb-01: rename the function to relative_soil_k
#     2022-Feb-01: remove viscosity correction
#     2022-Apr-19: move function to SoilHydraulics from PlantHydraulics (will be imported in PlantHydraulics)
#     2022-May-31: add a controller to ψ_25 to make avoid numerical issue
#     2022-Oct-20: set a minimum relative k at eps(FT)
#
#######################################################################################################################################################################################################
"""

    relative_soil_k(bc::BrooksCorey{FT}, θ::FT) where {FT}
    relative_soil_k(bc::BrooksCorey{FT}, ψ::Bool, ψ_25::FT) where {FT}
    relative_soil_k(vg::VanGenuchten{FT}, θ::FT) where {FT}
    relative_soil_k(vg::VanGenuchten{FT}, ψ::Bool, ψ_25::FT) where {FT}

Return the relative hydraulic conductance of the soil, given
- `bc` or `vg` `BrooksCorey` or `VanGenuchten` type structure
- `θ` Soil volumetric water content (absolute value)
- `ψ` Bool to indicate that next parameter is potential
- `ψ_25` Soil metric potential at a reference temperature of 25 °C

"""
function relative_soil_k end

relative_soil_k(bc::BrooksCorey{FT}, θ::FT) where {FT} = (
    (; B, Θ_RES, Θ_SAT) = bc;

    θ_eff = min(1, max(eps(FT), (θ - Θ_RES) / (Θ_SAT - Θ_RES)));

    return max(eps(FT), θ_eff ^ (2 * B + 3))
);

relative_soil_k(bc::BrooksCorey{FT}, ψ::Bool, ψ_25::FT) where {FT} = (
    (; B, Ψ_SAT) = bc;

    # if the potential > 0, return 1
    if ψ_25 >= 0
        return FT(1)
    end;

    θ_eff = (-Ψ_SAT / ψ_25) ^ (1 / B);

    return max(eps(FT), θ_eff ^ (2 * B + 3))
);

relative_soil_k(vg::VanGenuchten{FT}, θ::FT) where {FT} = (
    (; M, Θ_RES, Θ_SAT) = vg;

    θ_eff = min(1, max(eps(FT), (θ - Θ_RES) / (Θ_SAT - Θ_RES)));

    return max(eps(FT), sqrt(θ_eff) * (1 - (1 - θ_eff ^ (1 / M)) ^ M)^2)
);

relative_soil_k(vg::VanGenuchten{FT}, ψ::Bool, ψ_25::FT) where {FT} = (
    (; M, N, α) = vg;

    # if the potential > 0, return 1
    if ψ_25 >= 0
        return FT(1)
    end;

    θ_eff = (1 / (1 + (-ψ_25 * α) ^ N)) ^ M;

    return max(eps(FT), sqrt(θ_eff) * (1 - (1 - θ_eff ^ (1 / M)) ^ M)^2)
);
